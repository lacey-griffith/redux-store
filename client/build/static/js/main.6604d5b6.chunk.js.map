{"version":3,"sources":["utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","pages/Success.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js","assets/spinner.gif"],"names":["idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calcTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","itemToRemove","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Success","addOrder","saveOrder","setTimeout","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.6604d5b6.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\n\nexport function idbPromise(storeName, method, object){\n  return new Promise((resolve, reject)  => {\n    // open connection to the database\n    const request = window.indexedDB.open('shop-shop', 1)\n    // create variables to hold reference to the database\n    let db\n    let tx\n    let store\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    //on upgrade needed looks for a version change otherwise will not run \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    //handle errors\n    request.onerror = function(e) {\n      console.log('Uhhh... there seems to be a problem.')\n    }\n\n    //on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the db to the db variable\n      db = request.result\n      //open a transation to do whatever we pass into storeName --> must match one of the object store names\n      tx = db.transaction(storeName, 'readwrite')\n      //save a reference to that object store\n      store = tx.objectStore(storeName)\n\n      //if errors\n      db.onerror = function(e){\n        console.log('error:' + e)\n      }\n\n      switch(method){\n        case 'put':\n          store.put(object)\n          resolve(object)\n          break;\n        case 'get':\n          const all = store.getAll()\n          all.onsuccess = function () {\n            resolve(all.result)\n          }\n          break;\n        case 'delete':\n          store.delete(object._id)\n          break;\n        default:\n          console.log('Not a valid method.')\n          break;\n      }\n\n      //when the tx is complete, close db\n      tx.oncomplete = function() {\n        db.close();\n      }\n    }\n\n  })\n}","import {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from './actions';\n\n  import { useReducer } from 'react';\n  \n  export const reducer = (state, action) => {\n      //action.type is passed in (this is going to be a predefined action from actions.js)\n    switch (action.type) {\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n      case UPDATE_PRODUCTS:\n        return {\n            ...state,\n            products: [...action.products],\n        };\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n          return {\n            ...state,\n            categories: [...action.categories]\n        };\n        case UPDATE_CURRENT_CATEGORY:\n          return {\n            ...state,\n            currentCategory: action.currentCategory\n        };\n        case ADD_TO_CART:\n          return {\n            ...state,\n            cartOpen: true,\n            cart: [...state.cart, action.product]\n        };\n        case ADD_MULTIPLE_TO_CART:\n          return {\n            ...state,\n            cart: [...state.cart, ...action.products]\n        };\n        case REMOVE_FROM_CART:\n          let newState = state.cart.filter(product => {\n            return product._id !== action._id\n          })\n          return {\n            ...state,\n            cartOpen: newState.length > 0,\n            cart: newState\n        };\n        case UPDATE_CART_QUANTITY:\n          return {\n            ...state,\n            cartOpen: true,\n            cart: state.cart.map(product => {\n              if(action._id === product._id){\n                product.purchaseQuantity = action.purchaseQuantity\n              }\n              return product\n            })\n          };\n          case CLEAR_CART:\n            return {\n              ...state,\n              cartOpen: false,\n              cart: []\n            };\n            case TOGGLE_CART:\n              return {\n                ...state,\n                cartOpen: !state.cartOpen\n              }\n        // if it's none of these actions, do not update state at all and keep things the same!\n        default:\n          return state;\n    }\n  };\n\n  export function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n  }","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React, { createContext, useContext } from 'react';\nimport { useProductReducer } from './reducers';\n\n//createContext will b eused to instatiate a new Context object AKA we're using it to create\n//the container to hold global state data and functionality so it can be accessed through the app.\n\n//useContext is a react hook that allows the use state created from the createContext function\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\n\nconst StoreProvider = ({ value = [], ...props}) => {\n    const [state, dispatch] = useProductReducer({\n        products: [],\n        cart: [],\n        cartOpen: false,\n        categories: [],\n        currentCategory: ''\n    })\n    console.log(state)\n    return <Provider value={[state, dispatch]} {...props} />\n    //state ^ is the most up to date version of global state object\n    //dispatch is the method executed to update the state. \n}\n\nconst useStoreContext = () => {\n    return useContext(StoreContext)\n}\n\nexport { StoreProvider, useStoreContext }","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\nimport { useStoreContext } from '../../utils/GlobalState'\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions'\n\n//import indexdb helper function\nimport { idbPromise } from '../../utils/helpers'\n\nfunction ProductItem(item) {\n  //establish state object\n  const [state, dispatch] = useStoreContext();\n  //deconstruct cart object to avoid using state.cart\n  const { cart } = state\n\n  const addToCart = () => {\n    //find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n\n    //if there was a match update purchase quantity\n    if(itemInCart){\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      })\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      })\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: {...item, purchaseQuantity: 1 }\n      })\n      idbPromise('cart','put', { ...item, purchaseQuantity: 1 })\n    }\n  }\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!){\n    checkout(products: $products){\n      session\n    }\n  }\n`;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions'\n\nimport { idbPromise } from '../../utils/helpers'\n\nfunction ProductList() {\n  // const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  // const products = data?.products || [];\n\n  // function filterProducts() {\n  //   if (!currentCategory) {\n  //     return products;\n  //   }\n\n  //   return products.filter(\n  //     (product) => product.category._id === currentCategory\n  //   );\n  // }\n\n  const [state, dispatch] = useStoreContext();\n  //deconstuct currentCategory from the state object\n  const { currentCategory } = state;\n  const { loading, data } = useQuery(QUERY_PRODUCTS)\n\n  useEffect(() => {\n    //if there is data to be stored\n    if(data){\n      //store in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      })\n\n      //also store in indexdb using the helper function\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product)\n        //entering the promise function as 'storeName', 'method' and 'object'\n      })\n    } else if (!loading){\n      // if offline, loading will not be happening so get data from 'products' store in indexdb\n      idbPromise('products', 'get').then((products) => {\n        //use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        })\n      })\n    }\n  }, [data, loading, dispatch])\n\n  function filterProducts() {\n    if(!currentCategory){\n      return state.products\n    }\n    return state.products.filter(product => product.category._id === currentCategory)\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect }from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n\n//import context hook\nimport { useStoreContext } from '../../utils/GlobalState'\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\n\n//import indexdb helper function\nimport { idbPromise } from '../../utils/helpers'\n\nfunction CategoryMenu() {\n  // const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  // const categories = categoryData?.categories || [];\n\n  const [state, dispatch] = useStoreContext();\n  //deconstruct categories from global state object\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES)\n\n  useEffect(() => {\n    //if categoryData exists or has changed from the response of useQuery then run dispatch()\n    if(categoryData){\n      //execute dispatch function w/ action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      })\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category)\n      })\n    } else if (!loading) {\n      idbPromise('categories','get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        })\n      })\n    }\n  }, [categoryData, loading, dispatch])\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    })\n  }\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\n//import indexdb helper function to update cart data\nimport { idbPromise } from '../../utils/helpers';\n\nconst CartItem = ({ item }) => {\n    const [,dispatch] = useStoreContext()\n\n    const removeFromCart = item => {\n        if(item.purchaseQuantity - 1 > 0){\n            dispatch({\n                type: UPDATE_CART_QUANTITY,\n                _id: item._id,\n                purchaseQuantity: parseInt(item.purchaseQuantity) - 1\n            })\n            idbPromise('cart','put', { ...item, purchaseQuantity: parseInt(item.purchaseQuantity) - 1 })\n        } else {\n            dispatch({\n                type: REMOVE_FROM_CART,\n                _id: item._id\n            })\n            idbPromise('cart','delete', {...item})\n        }\n    };\n\n    const onChange = (e) => {\n        const value = e.target.value;\n        //if the value is changed to zero, remove entire item from cart\n        if(value === '0'){\n            dispatch({\n                type: REMOVE_FROM_CART,\n                _id: item._id\n            })\n            idbPromise('cart','delete', {...item})\n        } else {\n            dispatch({\n                type: UPDATE_CART_QUANTITY,\n                _id: item._id,\n                purchaseQuantity: parseInt(value)\n            })\n            idbPromise('cart','put', {...item, purchaseQuantity: parseInt(value)})\n        }\n    }\n\n    return(\n        <div className=\"flex-row\">\n            <div>\n                <img\n                src={`/images/${item.image}`}\n                alt=\"\"\n                />\n            </div>\n\n            <div>\n                <div>{item.name}, ${item.price}</div>\n                <div>\n                    <span>Qty:</span>\n                    <input\n                    type=\"number\"\n                    placeholder=\"1\"\n                    value={item.purchaseQuantity}\n                    onChange={onChange}\n                    />\n                    <span\n                    role=\"img\"\n                    aria-label=\"trash\"\n                    onClick={() =>removeFromCart(item)}\n                    >\n                    🗑️\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n  }\n  \n  export default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { loadStripe } from '@stripe/stripe-js'\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { QUERY_CHECKOUT } from '../../utils/queries'\n\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css'\n\n//import indexdb to make cart persistent\nimport { idbPromise } from '../../utils/helpers'\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx')\n\nconst Cart = () => {\n    //establish state variable\n    const [ state, dispatch ] = useStoreContext();\n    \n    //establish lazy query for using submit checkout query\n    //the data variable will contain the session id but only after the \n    //query is called in submitCheckout function\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT)\n\n\n    useEffect(() => {\n        async function getCart(){\n            const cart = await idbPromise('cart', 'get')\n            dispatch({\n                type: ADD_MULTIPLE_TO_CART,\n                products: [...cart]\n            })\n        }\n        if(!state.cart.length){\n            getCart();\n        }\n        //passing state.cart.length into dependency array \n        //if this wasnt, useEffect would continue running \n        //because it's here, it will only run again if state.cart.length changes\n    }, [state.cart.length, dispatch])\n\n    function toggleCart(){\n        dispatch({ type: TOGGLE_CART })\n    }\n\n    function calcTotal(){\n        let sum = 0\n        state.cart.forEach(item => {\n            sum += item.price * item.purchaseQuantity\n        })\n        return sum.toFixed(2)\n    }\n\n    //on click of checkout button \n    //loop over items saved in state.cart and add their product ids to the new productIds array\n    //QUERY_CHECKOUT will use this array to generate a stripe session\n    function submitCheckout() {\n        const productIds = []\n\n        state.cart.forEach((item => {\n            for(let i = 0; i < item.purchaseQuantity; i++){\n                productIds.push(item._id)\n            }\n        }))\n\n        getCheckout({\n            variables: { products: productIds}\n        })\n    }\n    //watch for changes to the data being returned from the QUERY_CHECKOUT call\n    useEffect(() => {\n        if(data){\n            stripePromise.then((res) => {\n                res.redirectToCheckout({ sessionId: data.checkout.session })\n            })\n        }\n    }, [data])\n\n    //if the cart is close (cartOpen: false) then display the shopping cart icon\n    if(!state.cartOpen){\n        return (\n        <div className='cart-closed' onClick={toggleCart}>\n            <span role='img' aria-label='cart'>🛒</span>\n        </div>\n        )\n    }\n\n    return (\n        <div className=\"cart\">\n        <div className=\"close\" onClick={toggleCart}>[close]</div>\n        <h2>Shopping Cart</h2>\n\n        {state.cart.length ? (\n            <div>\n            {state.cart.map(item => (\n                <CartItem key={item._id} item={item} />\n            ))}\n            <div className=\"flex-row space-between\">\n                <strong>Total: ${calcTotal()}</strong>\n                {\n                Auth.loggedIn() ?\n                    <button onClick={submitCheckout}>\n                    Checkout\n                    </button>\n                    :\n                    <span>(log in to check out)</span>\n                }\n            </div>\n            </div>\n        ) : (\n            <h6>\n            Your cart is empty! \n            </h6>\n        )}\n        </div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart/>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART, UPDATE_PRODUCTS } from \"../utils/actions\";\n\nimport Cart from '../components/Cart';\n\n//import indexdb helper function\nimport { idbPromise } from '../utils/helpers'\n\nfunction Detail() {\n\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    //checking if data in global products array\n    //determine which product_id to look at\n    if (products.length) {\n      //setting the currentProduct by matching the id from useParams\n      setCurrentProduct(products.find(product => product._id === id));\n    } else if (data) {\n      //if nothing in global state products array, use data from useQuery AND save it globally\n      //so the next time this is ran through, there will be products in the array\n      //and we can set the current prodcut to this one\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      //save data into indexdb\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product)\n      })\n    } else if(!loading){\n      //if we are offline\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        })\n      })\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n\n    if(itemInCart){\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      })\n      //if updating quantity of existing item in the cart use existing item data and increment\n      idbPromise('cart','put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1 })\n      } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      })\n      //if product isnt in the car, add it to the current shopping cart in indexdb offline state\n      idbPromise('cart', 'put', {...currentProduct, purchaseQuantity: 1})\n    }\n  };\n\n  const removeFromCart = () => {\n    const itemToRemove = cart.find((cartItem) => cartItem._id === id)\n\n    if(itemToRemove.purchaseQuantity - 1 > 0){\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: itemToRemove._id,\n        purchaseQuantity: parseInt(itemToRemove.purchaseQuantity) -1\n    })\n    //updating current item in the cart\n    idbPromise('cart', 'put', {...itemToRemove, purchaseQuantity: parseInt(itemToRemove.purchaseQuantity) - 1 })\n    } else {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: currentProduct._id\n      })\n      //delete the item from indexdb\n      idbPromise('cart', 'delete', { ...currentProduct })\n    }\n  }\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button \n            disabled={!cart.find(p => p._id === currentProduct._id)}\n            onClick={removeFromCart}>\n              Remove from Cart</button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart/>\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from 'react'\nimport { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../../src/utils/mutations'\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER)\n\n    useEffect(() => {\n        async function saveOrder() {\n            //get all items from indexdb cart\n            const cart = await idbPromise('cart','get')\n            //map over them to get array of ids\n            const products = cart.map(item => item._id)\n\n            if(products.length){\n                //save order data\n                const { data } = await addOrder({ variables: { products } })\n                const productData = data.addOrder.products\n\n                //once data is saved, delete items from cart\n                productData.forEach((item )=> {\n                    idbPromise('cart', 'delete', item)\n                })\n\n            }\n        }\n        saveOrder();\n    }, [addOrder])\n\n    //redirect to homepage after 3 seconds\n    setTimeout(function(){window.location.assign('/')}, 3000)\n\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h3>Thank you for your purchase.</h3>\n                <h3>You will now be redirected to the homepage.</h3>\n            </Jumbotron>\n        </div>\n\n    );\n  };\n  \n  export default Success;","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Success from './pages/Success';\nimport Nav from './components/Nav';\n\n//import global state object\nimport { StoreProvider } from './utils/GlobalState';\n\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/orderHistory\" component={OrderHistory} />\n            <Route exact path=\"/products/:id\" component={Detail} />\n            <Route exact path=\"/success\" component={Success}/>\n            <Route component={NoMatch} />\n          </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";"],"sourceRoot":""}